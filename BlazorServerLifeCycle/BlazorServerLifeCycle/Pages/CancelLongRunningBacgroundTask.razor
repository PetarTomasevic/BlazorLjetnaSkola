@page "/background-work"
@implements IDisposable
@using System.Threading
@using Microsoft.Extensions.Logging
@inject ILogger<CancelLongRunningBacgroundTask> Logger
<h3>CancelLongRunningBacgroundTask</h3>

<button @onclick="LongRunningWork">Trigger long running work</button>
<button @onclick="Dispose">Trigger Disposal</button>

<p>
    Components often perform long-running background work, such as making network calls (HttpClient) and interacting with databases. It's desirable to stop the background work to conserve system resources in several situations. For example, background asynchronous operations don't automatically stop when a user navigates away from a component.

    Other reasons why background work items might require cancellation include:

    An executing background task was started with faulty input data or processing parameters.
    The current set of executing background work items must be replaced with a new set of work items.
    The priority of currently executing tasks must be changed.
    The app must be shut down for server redeployment.
    Server resources become limited, necessitating the rescheduling of background work items.
    To implement a cancelable background work pattern in a component:

    Use a CancellationTokenSource and CancellationToken.
    On disposal of the component and at any point cancellation is desired by manually cancelling the token, call CancellationTokenSource.Cancel to signal that the background work should be cancelled.
    After the asynchronous call returns, call ThrowIfCancellationRequested on the token.
    In the following example:

    await Task.Delay(5000, cts.Token); represents long-running asynchronous background work.
    BackgroundResourceMethod represents a long-running background method that shouldn't start if the Resource is disposed before the method is called.
</p>

@code {
    private Resource resource = new();
    private CancellationTokenSource cts = new();

    protected async Task LongRunningWork()
    {
        Logger.LogInformation("Long running work started");

        await Task.Delay(5000, cts.Token);

        cts.Token.ThrowIfCancellationRequested();
        resource.BackgroundResourceMethod(Logger);
    }

    public void Dispose()
    {
        Logger.LogInformation("Executing Dispose");
        cts.Cancel();
        cts.Dispose();
        resource?.Dispose();
    }

    private class Resource : IDisposable
    {
        private bool disposed;

        public void BackgroundResourceMethod(ILogger<CancelLongRunningBacgroundTask> logger)
        {
            logger.LogInformation("BackgroundResourceMethod: Start method");

            if (disposed)
            {
                logger.LogInformation("BackgroundResourceMethod: Disposed");
                throw new ObjectDisposedException(nameof(Resource));
            }

            // Take action on the Resource

            logger.LogInformation("BackgroundResourceMethod: Action on Resource");
        }

        public void Dispose()
        {
            disposed = true;
        }
    }
}